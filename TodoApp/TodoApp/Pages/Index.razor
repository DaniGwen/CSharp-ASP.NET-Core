@page "/"
@inject HttpClient Http
@inject IConfiguration Configuration
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager NavigationManager

<h1><strong>ToDo</strong> Application</h1>
<hr />
<AuthorizeView>
    <Authorized>
        <NavLink class="btn btn-primary" href="addtask">New ToDo list</NavLink>
        <br />
        @if (todoTasks.Count == 0)
        {
            <hr />
            <h3>No ToDo lists</h3>
        }
        else
        {
            <hr />
            <button class="btn btn-sm btn-secondary"
                    @onclick="ToggleHidden">
                Show/Hide Todo's
            </button>
            <hr />

            foreach (var task in todoTasks)
            {
                <section class="task-wrapper">

                    <TasksComponent TodoTask="task" OnChanged="OnInitializedAsync"></TasksComponent>

                    @if (hidden)
                    {
                        <TodosComponent TaskId="task.TaskId"></TodosComponent>
                    }
                    else
                    {
                        <p>Todos are hidden.</p>
                    }
                    <button class="btn btn-sm btn-outline-info mb-2"
                            @onclick="()=> { AddTodo(task.TaskId); }">
                        new Todo
                    </button>
                    <br />
                </section>
                <hr class="task-divider" />
            }
        }
    </Authorized>
    <NotAuthorized>
        <p>
            Please <a href="Identity/Account/Register"><strong>Register</strong></a> or
            <a href="Identity/Account/Login"><strong>Log in</strong></a> to create todos.
        </p>
    </NotAuthorized>
</AuthorizeView>

@code{
    private List<TodoTask> todoTasks = new List<TodoTask>();

    bool hidden = true;

    protected override async Task OnInitializedAsync()
    {
        if (this.HttpContextAccessor.HttpContext.User.Identity.IsAuthenticated)
        {
            string userId = this.HttpContextAccessor
                .HttpContext
                .User
                .FindFirst(ClaimTypes.NameIdentifier)
                .Value;

            var apiUrlTask = this.Configuration["ApiUrl"] + "TodoTask/" + userId;

            this.todoTasks = await this.Http.GetFromJsonAsync<List<TodoTask>>(apiUrlTask);
        }
    }

    protected void ToggleHidden()
    {
        hidden = !hidden;
    }

    protected void AddTodo(int taskId)
    {
        this.NavigationManager.NavigateTo($"addtodo/{taskId}");
    }

    protected void RefreshPage()
    {
        // Gets called from TaskComponent to re-render this page
    }
}
