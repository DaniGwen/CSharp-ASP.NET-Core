@inject ITodoService TodoService
@inject NavigationManager NavigationManager

<div class="page-wrapper">
    @if (Todos.Where(t => t.TodoTaskId == TaskId).Count() == 0)
    {
        <p class="text-light">no todos...</p>
    }
    else
    {
        <section class="to-do-container">
            @foreach (var todo in Todos.Where(t => t.TodoTaskId == TaskId))
            {
                <div class="to-do-wrapper">
                    <article class="to-do">
                        <section class="to-do__status">
                            @if (todo.IsDone)
                            {
                                <a class="btn-custom btn btn-sm btn-success"
                                   @onclick="() =>  SetTodoStatus(false, todo.TodoId)">
                                    Done
                                </a>
                            }
                            else
                            {
                                <a class="btn-custom btn-custom--pending btn btn-sm"
                                   @onclick="() =>  SetTodoStatus(true, todo.TodoId)">
                                    Pending
                                </a>
                            }
                        </section>
                        <section class="to-do__links">
                            <NavLink class="link-small text-warning" href="#"
                                     @onclick="() => EditTodo(todo.TodoId, todo.Content)">
                                Edit
                            </NavLink>
                            <NavLink class="link-small text-danger" href="#"
                                     @onclick="()=> DeleteTodo(todo.TodoId)">
                                Remove
                            </NavLink>
                        </section>
                    </article>
                    @if (todo.IsDone)
                    {
                        <p class="to-do__content to-do__content--is-done">@todo.Content</p>
                    }
                    else
                    {
                        <p class="to-do__content">@todo.Content</p>
                    }
                </div>
            }
        </section>
    }
</div>


@code {
    private List<Todo> Todos = new List<Todo>();

    [Parameter]
    public int TaskId { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    protected override Task OnInitializedAsync()
    {
        Todos = TodoService.GetAllTodos().ToList();

        return base.OnInitializedAsync();
    }

    protected async void SetTodoStatus(bool isDone, int todoId)
    {
        var todo = Todos.FirstOrDefault(t => t.TodoId == todoId);

        if (todo != null)
        {
            if (isDone)
            {
                todo.IsDone = true;
            }
            else
            {
                todo.IsDone = false;
            }
        }

        await TodoService.EditTodo(todo);
    }

    protected async void DeleteTodo(int todoId)
    {
        await TodoService.DeleteTodo(todoId);

        await this.OnInitializedAsync();
    }

    protected void EditTodo(int todoId, string content)
    {
        NavigationManager.NavigateTo($"/edittodo/{todoId}/{content}");
    }
}
